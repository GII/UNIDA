/*******************************************************************************
 *   
 *   Copyright (C) 2013 Mytech Ingenieria Aplicada <http://www.mytechia.com>
 *   Copyright (C) 2013 Victor Sonora <victor@vsonora.com>
 * 
 *   This file is part of UNIDA.
 *
 *   UNIDA is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Affero General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   UNIDA is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Affero General Public License for more details.
 *
 *   You should have received a copy of the GNU Affero General Public License
 *   along with UNIDA.  If not, see <http://www.gnu.org/licenses/>.
 * 
 ******************************************************************************/


package com.unida.tools.librarybasicgui.dialog;


import com.mytechia.commons.framework.exception.InternalErrorException;
import com.mytechia.commons.framework.modelaction.exception.InstanceNotFoundException;
import com.unida.library.device.IDevice;
import com.unida.library.device.ontology.metadata.ControlCommandMetadata;
import com.unida.library.device.ontology.metadata.ControlFunctionalityMetadata;
import com.unida.library.device.ontology.state.DeviceState;
import com.unida.library.manage.im.InMemoryUniDAInstantiationFacade;
import com.unida.library.operation.OperationFailures;
import com.unida.library.operation.OperationTicket;
import com.unida.library.operation.device.IDeviceOperationCallback;
import java.util.Collection;
import javax.swing.JOptionPane;

/**
 *  Dialog class that can send two kinds of commands to an UniDA device:
 * OnCommand, OffCommand
 *  An ACK is sent back if the command is received by its destination device
 * 
 * @author victor
 */
public class OnOffCommandsDialog extends javax.swing.JDialog 
{

    private InMemoryUniDAInstantiationFacade instantiationFacade;
    private String deviceId;

    /**
     *  Constructor: an object of this class must be initilized for a given UniDA device
     */
    public OnOffCommandsDialog(java.awt.Frame parent, boolean modal,
            InMemoryUniDAInstantiationFacade instantiationFacade, String deviceId) 
    
    {
        super(parent, modal);
        
        initComponents();
        
        this.instantiationFacade = instantiationFacade;
        this.deviceId = deviceId;
        
        this.setTitle(this.getTitle() + ": " + deviceId);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jButtonExecuteON = new javax.swing.JButton();
        jButtonExecuteOFF = new javax.swing.JButton();
        jTextInfoExecution = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("On/Off command");
        setName("commandsDialog"); // NOI18N

        jButtonExecuteON.setText("Execute ON command");
        jButtonExecuteON.setName(""); // NOI18N
        jButtonExecuteON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonExecuteONActionPerformed(evt);
            }
        });

        jButtonExecuteOFF.setText("Execute OFF command");
        jButtonExecuteOFF.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonExecuteOFFActionPerformed(evt);
            }
        });

        jTextInfoExecution.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextInfoExecution.setMinimumSize(new java.awt.Dimension(10, 39));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Returned Ack:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jButtonExecuteON)
                .addGap(7, 7, 7)
                .addComponent(jButtonExecuteOFF))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jTextInfoExecution, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonExecuteON)
                    .addComponent(jButtonExecuteOFF))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextInfoExecution, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecuteONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecuteONActionPerformed
        try {
            IDevice device = instantiationFacade.getDeviceManageFacade().findById(deviceId);
            ControlCommandMetadata commandMetadata = new ControlCommandMetadata("http://elite.polito.it/ontologies/dogont.owl#OnCommand", 0);
            ControlFunctionalityMetadata functionalityMetadata = new ControlFunctionalityMetadata("http://elite.polito.it/ontologies/dogont.owl#OnOffFunctionality", new ControlCommandMetadata[0]);
            instantiationFacade.getDeviceOperationFacade().asyncSendCommand(device, functionalityMetadata, commandMetadata, new String[0], new OpCback());
        } catch (InternalErrorException | InstanceNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }
    }//GEN-LAST:event_jButtonExecuteONActionPerformed

    private void jButtonExecuteOFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecuteOFFActionPerformed
        try {
            IDevice device = instantiationFacade.getDeviceManageFacade().findById(deviceId);
            ControlCommandMetadata commandMetadata = new ControlCommandMetadata("http://elite.polito.it/ontologies/dogont.owl#OffCommand", 0);
            ControlFunctionalityMetadata functionalityMetadata = new ControlFunctionalityMetadata("http://elite.polito.it/ontologies/dogont.owl#OnOffFunctionality", new ControlCommandMetadata[0]);
            instantiationFacade.getDeviceOperationFacade().asyncSendCommand(device, functionalityMetadata, commandMetadata, new String[0], new OpCback());
        } catch (InternalErrorException | InstanceNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }
    }//GEN-LAST:event_jButtonExecuteOFFActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExecuteOFF;
    private javax.swing.JButton jButtonExecuteON;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextInfoExecution;
    // End of variables declaration//GEN-END:variables

    
    /*
     *  Implementation for IDeviceOperationCallback
     *  An object of this class will handle the ACK received for a command sent 
     * to an UniDA device
     */
    private class OpCback implements IDeviceOperationCallback {
        
        private static final String invalidResponse = "Invalid response for an UniDA Command Message.";

        @Override
        public void notifyQueryDeviceStateResult(OperationTicket ticket, IDevice dev, DeviceState state) {
            throw new UnsupportedOperationException(invalidResponse);
        }

        @Override
        public void notifyQueryDeviceStatesResult(OperationTicket ticket, IDevice dev, Collection<DeviceState> states) {
            throw new UnsupportedOperationException(invalidResponse);
        }
        
        @Override
        public void notifyWriteDeviceStateResult(OperationTicket ticket, IDevice dev)
        {
            throw new UnsupportedOperationException(invalidResponse);
        }

        @Override
        public void notifySendCommandQueryStateResult(OperationTicket ticket, IDevice dev, ControlFunctionalityMetadata func,
            ControlCommandMetadata cmd, Collection<String> params, Collection<DeviceState> states) {
            throw new UnsupportedOperationException(invalidResponse);
        }

        @Override
        public void notifyCommandExecution(OperationTicket ticket, IDevice dev, 
            ControlFunctionalityMetadata func, ControlCommandMetadata cmd) {
            jTextInfoExecution.setText("yippee!");
        }

        @Override
        public void notifyOperationFailure(OperationTicket ticket, IDevice dev, OperationFailures failure, String failureDescription) {
            jTextInfoExecution.setText("oh no!");
        }
    }
}
